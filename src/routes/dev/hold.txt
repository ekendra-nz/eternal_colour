<script lang="ts">
	import { onMount } from 'svelte';
	import { writable } from 'svelte/store';

	let canvas: HTMLCanvasElement | null = null;
	const luminosity = writable(0); // Slider value (0 to 1)
	let size = 100; // Canvas size
	let percentOfWindow = 0.7; // Scale relative to window
	let label = ''; // Display label

	// Fitzpatrick skin tones (HSV ranges and proportions)
	const skinTonesHSV = [
		{ h: [0, 0], s: [0, 0], v: [0, 0], label: 'No Overlay', range: 0.05 },
		{ h: [20, 30], s: [0.2, 0.4], v: [0.9, 1.0], label: 'Fitzpatrick I', range: 0.15 },
		{ h: [20, 30], s: [0.3, 0.5], v: [0.8, 0.9], label: 'Fitzpatrick II', range: 0.2 },
		{ h: [20, 40], s: [0.4, 0.6], v: [0.7, 0.8], label: 'Fitzpatrick III', range: 0.2 },
		{ h: [25, 40], s: [0.5, 0.7], v: [0.6, 0.7], label: 'Fitzpatrick IV', range: 0.15 },
		{ h: [30, 45], s: [0.6, 0.8], v: [0.4, 0.6], label: 'Fitzpatrick V', range: 0.15 },
		{ h: [35, 50], s: [0.7, 0.9], v: [0.2, 0.4], label: 'Fitzpatrick VI', range: 0.1 }
	];

	// Interpolate between two values
	function interpolateValue(start: number, end: number, factor: number): number {
		return start + factor * (end - start);
	}

	// Interpolate between two HSV ranges
	function interpolateHSV(
		start: { h: number[]; s: number[]; v: number[] },
		end: { h: number[]; s: number[]; v: number[] },
		factor: number
	): { h: number; s: number; v: number } {
		return {
			h: interpolateValue(start.h[0], end.h[1], factor),
			s: interpolateValue(start.s[0], end.s[1], factor),
			v: interpolateValue(start.v[0], end.v[1], factor)
		};
	}

	// Convert HSV to RGB
	function hsvToRgb(h: number, s: number, v: number): [number, number, number] {
		const c = v * s;
		const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
		const m = v - c;

		let r = 0,
			g = 0,
			b = 0;

		if (0 <= h && h < 60) {
			r = c;
			g = x;
			b = 0;
		} else if (60 <= h && h < 120) {
			r = x;
			g = c;
			b = 0;
		} else if (120 <= h && h < 180) {
			r = 0;
			g = c;
			b = x;
		} else if (180 <= h && h < 240) {
			r = 0;
			g = x;
			b = c;
		} else if (240 <= h && h < 300) {
			r = x;
			g = 0;
			b = c;
		} else if (300 <= h && h < 360) {
			r = c;
			g = 0;
			b = x;
		}

		return [Math.round((r + m) * 255), Math.round((g + m) * 255), Math.round((b + m) * 255)];
	}

	onMount(() => {
		const windowHeight = window.innerHeight;
		const windowWidth = window.innerWidth;
		const height = Math.round(windowHeight * percentOfWindow);
		const width = Math.round(windowWidth * percentOfWindow);
		size = Math.min(height, width);

		// Update canvas whenever luminosity changes
		const unsubscribe = luminosity.subscribe((lum) => {
			if (canvas) {
				canvas.width = size;
				canvas.height = size;

				const ctx = canvas.getContext('2d');
				if (!ctx) return;

				const radius = size / 2;
				const extendedRadius = radius + 1;
				const imageData = ctx.createImageData(size, size);

				// Determine skin tone based on slider value
				let adjustedLum = Math.max(0, lum - 0.05) / 0.95; // Skip first 5%
				let cumulativeRange = 0;
				let toneIndex = 0;

				for (let i = 0; i < skinTonesHSV.length; i++) {
					cumulativeRange += skinTonesHSV[i].range;
					if (lum <= cumulativeRange) {
						toneIndex = i;
						break;
					}
				}

				const rangeStart = cumulativeRange - skinTonesHSV[toneIndex].range;
				const factor = (lum - rangeStart) / skinTonesHSV[toneIndex].range;

				const skinToneHSV = interpolateHSV(
					skinTonesHSV[toneIndex],
					skinTonesHSV[Math.min(toneIndex + 1, skinTonesHSV.length - 1)],
					factor
				);
				const [r, g, b] = hsvToRgb(skinToneHSV.h, skinToneHSV.s, skinToneHSV.v);

				// Update label
				if (lum <= 0.05) {
					label = `${skinTonesHSV[0].label}`;
				} else {
					label = `${skinTonesHSV[toneIndex].label} - RGB(${r}, ${g}, ${b})`;
				}

				// Loop through pixels
				for (let y = -radius; y < radius; y++) {
					for (let x = -radius; x < radius; x++) {
						const distance = Math.sqrt(x * x + y * y);

						if (distance <= extendedRadius) {
							const angle = Math.atan2(y, x) + Math.PI;
							let hue = (angle / (2 * Math.PI)) * 360;
							if (hue >= 360) hue = 0;

							const saturation = Math.min(1, distance / radius);
							const value = 1;

							let [pixelR, pixelG, pixelB] = hsvToRgb(hue, saturation, value);

							pixelR = Math.round(pixelR * (1 - lum) + r * lum);
							pixelG = Math.round(pixelG * (1 - lum) + g * lum);
							pixelB = Math.round(pixelB * (1 - lum) + b * lum);

							const pixelIndex = ((y + radius) * size + (x + radius)) * 4;
							imageData.data[pixelIndex] = pixelR;
							imageData.data[pixelIndex + 1] = pixelG;
							imageData.data[pixelIndex + 2] = pixelB;
							imageData.data[pixelIndex + 3] = 255;
						}
					}
				}

				ctx.putImageData(imageData, 0, 0);
			}
		});

		return unsubscribe;
	});
</script>

<div class="container">
	<div class="label">{label}</div>

	<div class="slider-container">
		<div class="gradient-bar">
			<div class="gradient"></div>
			<div class="divisions">
				<div class="division" style="left: 5%;"></div>
				<div class="division" style="left: 20%;"></div>
				<div class="division" style="left: 40%;"></div>
				<div class="division" style="left: 60%;"></div>
				<div class="division" style="left: 75%;"></div>
				<div class="division" style="left: 100%;"></div>
			</div>
		</div>
		<div class="labels">
			<span>No Overlay</span>
			<span>Fitz I</span>
			<span>Fitz II</span>
			<span>Fitz III</span>
			<span>Fitz IV</span>
			<span>Fitz V</span>
			<span>Fitz VI</span>
		</div>
		<input class="slider" type="range" min="0" max="1" step="0.01" bind:value={$luminosity} />
	</div>

	<canvas bind:this={canvas}></canvas>
</div>

<style>
	.container {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 20px;
		margin: 20px;
	}

	.label {
		font-size: 1.2em;
		font-weight: bold;
		text-align: center;
	}

	.slider-container {
		width: 80%;
		position: relative;
	}

	.gradient-bar {
		width: 100%;
		height: 20px;
		position: relative;
		display: flex;
		align-items: center;
	}

	.gradient {
		position: absolute;
		width: 100%;
		height: 100%;
		background: linear-gradient(
			to right,
			transparent 0%,
			hsl(20, 20%, 95%) 5%,
			hsl(20, 35%, 85%) 20%,
			hsl(25, 50%, 70%) 40%,
			hsl(30, 60%, 55%) 60%,
			hsl(40, 70%, 45%) 75%,
			hsl(50, 80%, 35%) 100%
		);
	}

	.divisions {
		position: absolute;
		width: 100%;
		height: 100%;
		display: flex;
		justify-content: space-between;
	}

	.division {
		position: relative;
		width: 1px;
		height: 100%;
		background-color: black;
	}

	.labels {
		display: flex;
		justify-content: space-between;
		margin-top: 5px;
		font-size: 0.9em;
		font-weight: bold;
		color: #333;
	}

	.slider {
		width: 100%;
		margin-top: 10px;
	}
</style>
